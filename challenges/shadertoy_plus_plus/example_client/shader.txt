#version 310 es

precision highp image2D;

layout(local_size_x=1) in;

layout(binding = 8, rgba8) uniform writeonly image2D img;

float ball(vec2 p, float fx, float fy, float ax, float ay) {
	vec2 r = vec2(p.x + fx * ax, p.y + fy * ay);
	return 0.09 / length(r);
}

float blob(vec2 p) {
	float col = 0.0;
	col += ball(p - vec2(.4), 2.0, 2.0, 0.1, 0.5);
	col += ball(p - vec2(.8), 1.5, 2.5, 0.2, 0.3);
	col += ball(p - vec2(.2), 1.5, 0.5, 0.6, 0.7);
	col += ball(p - vec2(.1, .8), 0.1, .5, 0.6, 0.7);
	col = step(.69, col);
	return col;
}

vec2 rotate(vec2 v, float a) {
	float s = sin(a);
	float c = cos(a);
	mat2 m = mat2(c, -s, s, c);
	return m * v;
}

float flag(vec2 p) {
	p.x -= .55;
	p.y -= .2;
	p = rotate(p, .1);
	p.y = p.y + sin(p.x * 30.) * .01;
	float x = step(.1, p.x) * (1. - step(.4, p.x));
	float y = step(.1, p.y) * (1. - step(.3, p.y));

	float xs = step(.1, p.x) * (1. - step(.12, p.x));
	float ys = step(.1, p.y) * (1. - step(.48, p.y));

	return clamp(x * y + (xs * ys), .0, 1.0);
}

float hxp(vec2 p) {
	vec2 porig = p;

	// h
	p = porig - vec2(.08, .45);
	float x1 = step(.1, p.x) * (1. - step(.14, p.x));
	float y1 = step(.1, p.y) * (1. - step(.32, p.y));
	float x2 = step(.2, p.x) * (1. - step(.24, p.x));
	float x3 = step(.14, p.x) * (1. - step(.20, p.x));
	float y3 = step(.18, p.y) * (1. - step(.22, p.y));
	float h = max(max(x1 * y1, y1 * x2), x3 * y3);

	vec2 p1 = porig - vec2(.4);
	p1 = rotate(p1, .45);
	x1 = step(.1, p1.x) * (1. - step(.14, p1.x));
	y1 = step(.1, p1.y) * (1. - step(.35, p1.y));

	vec2 p2 = porig - vec2(.2, .51);
	p2 = rotate(p2, -.45);
	x2 = step(.1, p2.x) * (1. - step(.14, p2.x));
	float y2 = step(.1, p2.y) * (1. - step(.35, p2.y));
	float x = max(x1 * y1, x2 * y2);

	float l = .0;
	vec2 p3 = porig - vec2(.5, .55);
	float d = length(p3 - vec2(.08, .07));
	float r = (1. - step(.07, d)) - (1. - step(.035, d));
	x1 = step(.0, p3.x) * (1. - step(.035, p3.x));
	y1 = step(.0, p3.y) * (1. - step(.22, p3.y));
	l = max(r, x1 * y1);

	return max(max(h, x), l);
}

float block(vec2 p) {
	float x1 = step(.0, p.x) * (1. - step(.55, p.x));
	float y1 = step(.0, p.y) * (1. - step(.35, p.y));
	return x1 * y1;
}

vec3 calcColor(vec2 p) {
	float off = .2;

	float b = blob(p * 2. - vec2(1.));
	float f = flag(p - vec2(.0, -.2));
	float h = hxp(p - vec2(.07, -.05));
	float bl = block(p - vec2(.2, .42));

	p = vec2(p.x, p.y);
	vec2 rep = mod(p, vec2(off));
	vec2 q = step(off * .5, rep);
	float cbase = uintBitsToFloat(floatBitsToUint(q.x) ^ floatBitsToUint(q.y));

	float m1 = pow(1. - smoothstep(.0, off * .3, mod(p.x, off * .5)), 5.0);
	vec3 c1 = m1 * (1. - cbase) * vec3(.9,.2,.0);

	float m2 = pow(1. - smoothstep(.0, off * .5, mod(p.x - off, off * .5)), 4.0);
	vec3 c2 = m2 * (1. - cbase) * vec3(.0,.1,.9);

	vec3 back = vec3(cbase) + c1 + c2;
	vec3 objects = b * vec3(p.x, p.y, sin(p.x * p.y * 1000.));
	back = mix(back, objects, b);
	vec3 g = mix(vec3(222. / 255., 55. / 255., 60. / 255.), vec3(.8,.2,.5), 1. - pow(smoothstep(0.0, .4, p.y), 2.));
	back = mix(back, g, f);

	vec3 hb = mix(vec3(0. / 255., 153. / 255., 218. / 255.), vec3(0.0 / 255.0, 121.0 / 255.0, 250.0 / 255.0), 1. - pow(smoothstep(.4, .9, p.y), 8.));
	vec3 hhh = mix(hb, vec3(.2, .2, .8), 1.-h);
	back = mix(back, hhh, bl * .94);

	return back;
}

void main() {
	ivec2 dim = imageSize(img);
	float ratio = float(dim.x) / float(dim.y);
	for (int i = 0; i < dim.x; i++) {
		for (int j = 0; j < dim.y; j++) {
			vec2 q = vec2(i, j) / vec2(dim);
			vec4 color = vec4(calcColor(q), 1.);
			imageStore(img, ivec2(i, j), color);
		}
	}
}
